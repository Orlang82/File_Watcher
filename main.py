"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ STAT
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é

–ê–≤—Ç–æ—Ä: Risk Management Department
–í–µ—Ä—Å–∏—è: 2.0 (–º–æ–¥—É–ª—å–Ω–∞—è)
"""

import sys
import logging
import threading
import time
import signal
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ stdout/stderr –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ Windows
if hasattr(sys.stdout, "reconfigure"):
    sys.stdout.reconfigure(encoding="utf-8")
    sys.stderr.reconfigure(encoding="utf-8")

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
try:
    from config.settings import LOG_DIR, LOG_MAX_BYTES, LOG_BACKUP_COUNT
    from config.watch_rules import WATCH_CONFIGS, get_watch_paths
    from core.watcher import MultiDirHandler
    from core.file_handler import daemon_heartbeat, monitor_observer_health
    from core.utils import validate_paths, test_filename_conditions
    from ui.tray_app import TrayApp
    from ui.notifications import show_startup_notification, show_error_notification
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö")
    print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:")
    print("  watcher/")
    print("    ‚îú‚îÄ‚îÄ main.py")
    print("    ‚îú‚îÄ‚îÄ config/")
    print("    ‚îú‚îÄ‚îÄ core/")
    print("    ‚îî‚îÄ‚îÄ ui/")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    sys.exit(1)

# –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
try:
    from watchdog.observers import Observer
    from logging.handlers import RotatingFileHandler
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã:")
    print("  pip install watchdog winotify pillow pystray")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    sys.exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
logger = None
RUNNING = True

def setup_logging():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤.
    
    Returns:
        logging.Logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        LOG_DIR.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        log_handler = RotatingFileHandler(
            LOG_DIR / 'file_watcher.log',
            maxBytes=LOG_MAX_BYTES,
            backupCount=LOG_BACKUP_COUNT,
            encoding='utf-8'
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        log_handler.setFormatter(formatter)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            handlers=[log_handler]
        )
        
        logger = logging.getLogger(__name__)
        logger.info("=== –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ ===")
        return logger
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        logging.basicConfig(level=logging.INFO)
        return logging.getLogger(__name__)

def validate_configuration():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã.
    
    Returns:
        bool: True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        paths_to_check = get_watch_paths()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        from config.settings import DEST_BASE, ICON_PATH
        paths_to_check.extend([
            {'path': DEST_BASE, 'description': '–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'},
            {'path': Path(ICON_PATH).parent, 'description': '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏–∫–æ–Ω–∫–æ–π'}
        ])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏
        all_valid = validate_paths(paths_to_check)
        
        if not all_valid:
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –Ω–æ —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        test_filename_conditions(WATCH_CONFIGS)
        
        return True
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def create_observers():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (observer, config) –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
    """
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    observers = []
    
    for i, config in enumerate(WATCH_CONFIGS):
        try:
            path = config["watch_dir"]
            conditions = config["conditions"]
            description = config.get("description", f"–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å {i+1}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if not Path(path).exists():
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {path}")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
            handler = MultiDirHandler(conditions)
            observer = Observer()
            observer.schedule(handler, path, recursive=True)
            observer.start()
            
            observers.append((observer, config))
            logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å: {description} -> {path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –¥–ª—è {config.get('watch_dir', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è')}: {e}")
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(observers)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –∏–∑ {len(WATCH_CONFIGS)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö")
    return observers

def background_monitoring(observers):
    """
    –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.
    
    Args:
        observers (list): –°–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    logger.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã...")
    
    from config.settings import HEARTBEAT_INTERVAL, HEALTH_CHECK_INTERVAL
    heartbeat_counter = 0
    
    try:
        while RUNNING:
            time.sleep(1)
            heartbeat_counter += 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
            if heartbeat_counter % HEALTH_CHECK_INTERVAL == 0:
                monitor_observer_health(observers)
            
            # –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            if heartbeat_counter % HEARTBEAT_INTERVAL == 0:
                daemon_heartbeat()
                heartbeat_counter = 0
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                active_count = sum(1 for obs, _ in observers if obs.is_alive())
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {active_count}/{len(observers)} –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–Ω—ã")
    
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª KeyboardInterrupt –≤ —Ñ–æ–Ω–æ–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
    finally:
        cleanup_observers(observers)

def cleanup_observers(observers):
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π.
    
    Args:
        observers (list): –°–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    """
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    for i, (observer, config) in enumerate(observers):
        try:
            description = config.get('description', f'–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å {i+1}')
            observer.stop()
            observer.join(timeout=10)
            logger.info(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {description}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è {i+1}: {e}")
    
    logger.info("–í—Å–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def signal_handler(signum, frame):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
    
    Args:
        signum: –ù–æ–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞
        frame: –§—Ä–µ–π–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    global RUNNING
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    RUNNING = False

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    Returns:
        int: –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    global logger, RUNNING
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        logger = setup_logging()
        logger.info("üöÄ === –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –§–ê–ô–õ–û–í STAT ===")
        logger.info(f"–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path(__file__).parent}")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not validate_configuration():
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            show_error_notification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return 1
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        observers = create_observers()
        if not observers:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è")
            show_error_notification("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π")
            return 1
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ UI
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        tray_app = TrayApp()
        tray_app.observers = observers
        
        if not tray_app.setup_tray():
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –±–µ–∑ UI")
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        bg_thread = threading.Thread(
            target=background_monitoring, 
            args=(observers,), 
            daemon=True,
            name="BackgroundMonitoring"
        )
        bg_thread.start()
        
        logger.info(f"üéØ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π: {len(observers)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        show_startup_notification()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if tray_app.icon:
            logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è...")
            tray_app.run()  # –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
        else:
            logger.info("–ó–∞–ø—É—Å–∫ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
            # –ü—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è –µ—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ—è
            try:
                while RUNNING:
                    time.sleep(1)
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω Ctrl+C")
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        show_error_notification(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return 1
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
        RUNNING = False
        if 'observers' in locals():
            cleanup_observers(observers)
        logger.info("=== –°–ò–°–¢–ï–ú–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê ===")
        return 0

if __name__ == "__main__":
    sys.exit(main())
