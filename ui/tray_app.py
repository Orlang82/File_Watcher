"""
–ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
"""

import logging
import os
from pathlib import Path

try:
    import pystray
    from PIL import Image, ImageDraw
except ImportError as e:
    logging.warning(f"–ú–æ–¥—É–ª–∏ pystray –∏–ª–∏ PIL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
    pystray = None
    Image = None
    ImageDraw = None

from config.settings import ICON_PATH, LOG_DIR
from .notifications import show_status_notification, show_restart_notification

logger = logging.getLogger(__name__)

class TrayApp:
    """
    –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ—è."""
        self.observers = []
        self.icon = None
        self.running = True
        
        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è")

    def create_tray_icon(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è.
        
        Returns:
            PIL.Image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
        """
        if not Image or not ImageDraw:
            logger.warning("PIL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏–∫–æ–Ω–∫–∞ —Ç—Ä–µ—è –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞")
            return None
            
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–∫–æ–Ω–∫—É
            if Path(ICON_PATH).exists():
                image = Image.open(ICON_PATH)
                if image.size != (64, 64):
                    image = image.resize((64, 64), Image.Resampling.LANCZOS)
                logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞: {ICON_PATH}")
                return image
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É –∏–∑ {ICON_PATH}: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
        try:
            image = Image.new('RGB', (64, 64), color='blue')
            draw = ImageDraw.Draw(image)
            
            # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∏–º–≤–æ–ª –ø–∞–ø–∫–∏
            draw.rectangle([10, 20, 54, 50], fill='lightblue', outline='darkblue', width=2)
            draw.rectangle([15, 15, 35, 25], fill='lightblue', outline='darkblue', width=2)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª "–≥–ª–∞–∑–∞" –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            draw.ellipse([20, 30, 30, 40], fill='white', outline='black')
            draw.ellipse([23, 33, 27, 37], fill='black')
            
            logger.debug("–°–æ–∑–¥–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–∫–æ–Ω–∫–∞ —Ç—Ä–µ—è")
            return image
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é –∏–∫–æ–Ω–∫—É: {e}")
            return None

    def setup_tray(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∫–æ–Ω–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ."""
        if not pystray:
            logger.warning("pystray –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω")
            return False
            
        try:
            image = self.create_tray_icon()
            if not image:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç—Ä–µ—è")
                return False
            
            menu = pystray.Menu(
                pystray.MenuItem("üìä –°—Ç–∞—Ç—É—Å", self.show_status),
                pystray.MenuItem("üìã –û—Ç–∫—Ä—ã—Ç—å –ª–æ–≥–∏", self.open_logs),
                pystray.MenuItem("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", self.restart_watchers),
                pystray.Menu.SEPARATOR,
                pystray.MenuItem("‚ùå –í—ã—Ö–æ–¥", self.quit_app)
            )
            
            self.icon = pystray.Icon(
                "FileWatcher", 
                image, 
                "File Watcher - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤", 
                menu
            )
            
            logger.info("–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è: {e}")
            return False
        
    def show_status(self, icon=None, item=None):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π.
        
        Args:
            icon: –ò–∫–æ–Ω–∫–∞ —Ç—Ä–µ—è (–ø–∞—Ä–∞–º–µ—Ç—Ä pystray)
            item: –≠–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é (–ø–∞—Ä–∞–º–µ—Ç—Ä pystray)
        """
        try:
            active_watchers = sum(1 for obs, _ in self.observers if obs.is_alive())
            total_watchers = len(self.observers)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—é
            status_details = []
            for i, (observer, config) in enumerate(self.observers):
                status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if observer.is_alive() else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                description = config.get('description', f'–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å {i+1}')
                status_details.append(f"{status} {description}")
            
            status_message = f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π: {active_watchers}/{total_watchers}"
            if status_details:
                status_message += f"\n{chr(10).join(status_details[:3])}"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                if len(status_details) > 3:
                    status_message += f"\n... –∏ –µ—â–µ {len(status_details) - 3}"
            
            show_status_notification(
                title="üìä File Watcher - –°—Ç–∞—Ç—É—Å",
                message=status_message,
                duration=8
            )
            
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω —Å—Ç–∞—Ç—É—Å: {active_watchers}/{total_watchers} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            show_status_notification(
                title="‚ùå –û—à–∏–±–∫–∞",
                message="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                duration=5
            )
        
    def open_logs(self, icon=None, item=None):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å –ª–æ–≥–∞–º–∏.
        
        Args:
            icon: –ò–∫–æ–Ω–∫–∞ —Ç—Ä–µ—è (–ø–∞—Ä–∞–º–µ—Ç—Ä pystray)
            item: –≠–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é (–ø–∞—Ä–∞–º–µ—Ç—Ä pystray)
        """
        try:
            if LOG_DIR.exists():
                os.startfile(str(LOG_DIR))
                logger.info(f"–û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞ —Å –ª–æ–≥–∞–º–∏: {LOG_DIR}")
            else:
                logger.warning(f"–ü–∞–ø–∫–∞ —Å –ª–æ–≥–∞–º–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {LOG_DIR}")
                show_status_notification(
                    title="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    message="–ü–∞–ø–∫–∞ —Å –ª–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    duration=5
                )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –ª–æ–≥–∞–º–∏: {e}")
            show_status_notification(
                title="‚ùå –û—à–∏–±–∫–∞",
                message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –ª–æ–≥–∞–º–∏",
                duration=5
            )
            
    def restart_watchers(self, icon=None, item=None):
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π.
        
        Args:
            icon: –ò–∫–æ–Ω–∫–∞ —Ç—Ä–µ—è (–ø–∞—Ä–∞–º–µ—Ç—Ä pystray)
            item: –≠–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é (–ø–∞—Ä–∞–º–µ—Ç—Ä pystray)
        """
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from core.file_handler import monitor_observer_health
            
            monitor_observer_health(self.observers)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            active_watchers = sum(1 for obs, _ in self.observers if obs.is_alive())
            total_watchers = len(self.observers)
            
            show_restart_notification(active_watchers, total_watchers)
            logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {active_watchers}/{total_watchers} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π: {e}")
            show_status_notification(
                title="‚ùå –û—à–∏–±–∫–∞",
                message="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π",
                duration=5
            )
        
    def quit_app(self, icon=None, item=None):
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        
        Args:
            icon: –ò–∫–æ–Ω–∫–∞ —Ç—Ä–µ—è (–ø–∞—Ä–∞–º–µ—Ç—Ä pystray)
            item: –≠–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é (–ø–∞—Ä–∞–º–µ—Ç—Ä pystray)
        """
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è...")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            import config.settings
            config.settings.RUNNING = False
            self.running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É —Ç—Ä–µ—è
            if self.icon:
                self.icon.stop()
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            from .notifications import show_shutdown_notification
            show_shutdown_notification()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")

    def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤).
        
        Returns:
            bool: True –µ—Å–ª–∏ —Ç—Ä–µ–π –±—ã–ª –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        if not self.icon:
            logger.error("–ò–∫–æ–Ω–∫–∞ —Ç—Ä–µ—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            return False
            
        try:
            logger.info("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è...")
            self.icon.run()  # –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è: {e}")
            return False

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π."""
        try:
            if self.icon:
                self.icon.stop()
                logger.info("–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è: {e}")

    def get_stats(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π.
        
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            active_count = sum(1 for obs, _ in self.observers if obs.is_alive())
            return {
                'total_observers': len(self.observers),
                'active_observers': active_count,
                'inactive_observers': len(self.observers) - active_count,
                'tray_running': self.running and self.icon is not None
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                'total_observers': 0,
                'active_observers': 0,
                'inactive_observers': 0,
                'tray_running': False
            }
